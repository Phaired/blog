---
const { heroImage, heroGif } = Astro.props;
---

<style>
    .hero-image-container {
        position: relative;
        width: 1020px;
        max-width: 100%; /* Pour la responsivité sur petits écrans */
        margin: 0 auto; /* Centre le conteneur */
        overflow: hidden;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
        background-color: var(--skeleton-color, #f0f0f0);
    }

    .hero-image {
        width: 100%;
        height: 100%;
        object-fit: cover;
        display: block;
        will-change: transform;
        transform: translateZ(0);
    }

    .hero-gif {
        position: absolute;
        inset: 0;
        opacity: 0;
        transition: opacity 0.5s ease-in-out;
        pointer-events: none;
    }

    .hero-gif.visible {
        opacity: 1;
    }

    @media (prefers-color-scheme: dark) {
        .hero-image-container {
            --skeleton-color: #2a2a2a;
        }
    }

    @media (prefers-reduced-motion: reduce) {
        .hero-gif {
            display: none;
        }
    }
</style>

{
    heroImage && (
        <div class="hero-image-container">
            <img
                class="hero-image"
                src={heroImage}
                alt="Hero Image"
                loading="lazy"
            />

            {heroGif && (
                <img
                    class="hero-image hero-gif"
                    src={heroGif}
                    alt="Animated Hero Image"
                    loading="lazy"
                    onload="this.classList.add('visible');"
                />
            )}
        </div>
    )
}

<script>
    const observer = new IntersectionObserver(
        (entries) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    const gifImage = entry.target.querySelector(".hero-gif");
                    if (gifImage && !gifImage.classList.contains("visible")) {
                        gifImage.classList.add("visible");
                    }
                    observer.unobserve(entry.target);
                }
            });
        },
        {
            rootMargin: "50px 0px",
            threshold: 0.1,
        },
    );

    document.querySelectorAll(".hero-image-container").forEach((container) => {
        observer.observe(container);
    });
</script>
