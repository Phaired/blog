<button id="themeToggle" aria-label="Toggle theme">
    <svg
        id="themeIcon"
        color="rgb(var(--color-text))"
        width="30px"
        xmlns="http://www.w3.org/2000/svg"
        viewBox="0 0 24 24"
    >
        <path
            class="sun"
            fill-rule="evenodd"
            d="M12 17.5a5.5 5.5 0 1 0 0-11 5.5 5.5 0 0 0 0 11zm0 1.5a7 7 0 1 0 0-14 7 7 0 0 0 0 14zm12-7a.8.8 0 0 1-.8.8h-2.4a.8.8 0 0 1 0-1.6h2.4a.8.8 0 0 1 .8.8zM4 12a.8.8 0 0 1-.8.8H.8a.8.8 0 0 1 0-1.6h2.5a.8.8 0 0 1 .8.8zm16.5-8.5a.8.8 0 0 1 0 1l-1.8 1.8a.8.8 0 0 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM6.3 17.7a.8.8 0 0 1 0 1l-1.7 1.8a.8.8 0 1 1-1-1l1.7-1.8a.8.8 0 0 1 1 0zM12 0a.8.8 0 0 1 .8.8v2.5a.8.8 0 0 1-1.6 0V.8A.8.8 0 0 1 12 0zm0 20a.8.8 0 0 1 .8.8v2.4a.8.8 0 0 1-1.6 0v-2.4a.8.8 0 0 1 .8-.8zM3.5 3.5a.8.8 0 0 1 1 0l1.8 1.8a.8.8 0 1 1-1 1L3.5 4.6a.8.8 0 0 1 0-1zm14.2 14.2a.8.8 0 0 1 1 0l1.8 1.7a.8.8 0 0 1-1 1l-1.8-1.7a.8.8 0 0 1 0-1z"
        ></path>
        <path
            class="moon"
            fill-rule="evenodd"
            d="M16.5 6A10.5 10.5 0 0 1 4.7 16.4 8.5 8.5 0 1 0 16.4 4.7l.1 1.3zm-1.7-2a9 9 0 0 1 .2 2 9 9 0 0 1-11 8.8 9.4 9.4 0 0 1-.8-.3c-.4 0-.8.3-.7.7a10 10 0 0 0 .3.8 10 10 0 0 0 9.2 6 10 10 0 0 0 4-19.2 9.7 9.7 0 0 0-.9-.3c-.3-.1-.7.3-.6.7a9 9 0 0 1 .3.8z"
        ></path>
    </svg>
</button>

<style>
    #themeToggle {
        border: 0;
        background: none;
        cursor: pointer;
    }
    .sun {
        fill: black;
    }
    .moon {
        fill: transparent;
    }

    :root.dark .sun {
        fill: transparent;
    }
    :root.dark .moon {
        fill: white;
    }
</style>

<script is:inline>
    const handleTheme = () => {
        const root = document.documentElement;
        const themeIcon = document.getElementById("themeIcon");
        const themeToggle = document.getElementById("themeToggle");

        if (!themeToggle || !themeIcon) return; // Protection contre les éléments manquants

        const setTheme = (theme) => {
            root.classList.toggle("dark", theme === "dark");
            localStorage.setItem("theme", theme);

            const isDark = theme === "dark";
            const sunPath = themeIcon.querySelector(".sun");
            const moonPath = themeIcon.querySelector(".moon");

            if (sunPath && moonPath) {
                sunPath.style.fill = isDark ? "transparent" : "black";
                moonPath.style.fill = isDark ? "white" : "transparent";
            }

            const colors = {
                "--color-text": isDark ? "229, 233, 240" : "15, 18, 25",
                "--color-text-hover": isDark ? "96, 115, 159" : "34, 41, 57",
                "--gradient-bg": isDark
                    ? "rgba(34, 41, 57, 50%), #000"
                    : "rgba(229, 233, 240, 50%), #fff",
                "--bg-color": isDark ? "45, 47, 54" : "245, 245, 245",
                "--bg-color-accent": isDark ? "35, 37, 44" : "225, 225, 225",
                "--bg-color-code": isDark ? "25, 27, 34" : "229, 233, 240",
                "--color-date": isDark ? "229, 233, 240" : "96, 115, 159",
                "--color-text-title": isDark ? "239, 243, 250" : "25, 28, 35",
            };

            Object.entries(colors).forEach(([property, value]) => {
                root.style.setProperty(property, value);
            });
        };

        const getCurrentTheme = () => {
            return (
                localStorage.getItem("theme") ||
                (window.matchMedia("(prefers-color-scheme: dark)").matches
                    ? "dark"
                    : "light")
            );
        };

        // Supprime l'ancien listener s'il existe
        themeToggle.removeEventListener("click", themeToggle.clickHandler);

        // Crée un nouveau listener
        themeToggle.clickHandler = () => {
            const newTheme = root.classList.contains("dark") ? "light" : "dark";
            setTheme(newTheme);
        };

        // Ajoute le nouveau listener
        themeToggle.addEventListener("click", themeToggle.clickHandler);

        // Applique le thème initial
        setTheme(getCurrentTheme());
    };

    // Initialisation au chargement
    document.addEventListener("DOMContentLoaded", handleTheme);

    // Réinitialisation après les transitions Astro
    document.addEventListener("astro:after-swap", handleTheme);

    // Gestion des transitions de page
    document.addEventListener("astro:page-load", handleTheme);
</script>
